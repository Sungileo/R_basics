---
title: "PT.3 - 데이터프레임, 행렬의 연산"
description: "2023-2학기 튜터링"
author: "Sungil Park"
date: "2023/10/17"
---

```{r}
rm(list = ls())
```

## 데이터 프레임

**데이터프레임**은 R에서 가장 많이 쓰이는 데이터 구조

-   2차원 형태의 데이터 구조 (행, 열)

-   데이터 형태(숫자, 문자, Boolean)에 국한받지 않음

-   `data.frame()`함수를 이용하여 생성

`city`, `rank`라는 벡터 생성 후 `city.info`라는 데이터프레임 생성

```{r}
city <- c("Seoul", "Tokyo", "Washington")
rank <- c(1,3,2) 

city.info <- data.frame(city, rank)
city.info
```

### iris 데이터셋

iris 데이터셋은 R에 내장되어있는 데이터셋으로, 붓꽃의 정보를 담고 있다.

|   열 이름    |                               정보                               |
|:--------------:|:------------------------------------------------------:|
| Sepal Length |                          꽃받침의 길이                           |
| Sepal Width  |                          꽃받침의 너비                           |
| Petal Length |                           꽃잎의 길이                            |
| Petal Width  |                           꽃잎의 너비                            |
|   Species    | 꽃의 종류 정보 (setosa / versicolor / virginica 의 3종류로 구분) |

`str()`함수는 데이터프레임의 정보를 확인할 수 있다.

-   `150 obs` : 150 observations 관측치 수 (행)

-   `5 variables` : 변수 수 (열)

-   `$ Sepal.Length: num 5.1 4.9 4.7 ....` : 열 이름, 데이터 형태(num), 내용

-   ...

-   `$ Species     : Factor w/ 3 levels "setosa","versicolor` : 열 이름, 형태(factor), 팩터 정보, 내용

```{r}
str(iris)
```

### 데이터프레임의 정보

```{r}
dim(iris)         # 행과 열의 개수 출력 (Dimensions)
nrow(iris)        # 행의 개수 출력 (number of row)
ncol(iris)        # 열의 개수 출력 (number of column)
colnames(iris)    # 열 이름 출력, names()와 결과 동일 (column names)
```

### 데이터프레임 일부분 출력

`head(데이터, 개수)`, `tail(데이터, 개수)`함수는 데이터의 앞, 뒷부분 일부를 개수만큼 출력한다.

```{r}
head(iris)        # 데이터셋의 앞부분 일부 출력
tail(iris,4)        # 데이터셋의 뒷부분 일부 출력력
```

### 데이터프레임의 인덱싱

-   행렬(matrix) 인덱싱과 동일

```{r}
iris[,c(1:2)]                      # 1,2열의 모든 데이터
iris[,c(1,3,5)]                    # 1,3,5열의 모든 데이터  
iris[,c("Sepal.Length", "Species")]# 1,5열의 모든 데이터
iris[1:5,]                         # 1~5행의 도든 데이터
iris[1:5,c(1,3)]                   # 1~5행의 데이터 중 1,3열의 데이터
iris[,-5]                          # 5열을 제외한 모든 데이터
```

### 데이터프레임의 열 추출

`iris[열번호]`함수는 열을 추출한다 (데이터프레임 형식으로 추출됨)

-   `iris[5]` = `iris["Species"]`

`iris$열이름`함수는 열 속 값을 추출한다 (벡터나, 팩터 형식으로 추출됨, `iris[,열번호]`와 동일)

-   `iris[,5]` = `iris[,"Species"]` = `iris$Species`

```{r}
class(iris[5])
iris[5]     
class(iris$Species)
iris$Species
```

`unique()`함수는 중복이 제거된 데이터의 값을 출력한다

```{r}
unique(iris[,5])    # 품종의 종류 보기(중복 제거)
```

`table()`함수는 팩터의 정보와, 각 팩터당 수를 출력한다.

```{r}
table(iris[,"Species"])   # 품종의 종류별 행의 개수 세기
```

### 데이터프레임 기초통계량

`summary()`함수는 각 열의 기초통계량(num), table값(factor)을 출력한다.

```{r}
colSums(iris[,-5])  # 열별 합계
colMeans(iris[,-5]) # 열별 평균
rowSums(iris[,-5])  # 행별 합계
rowMeans(iris[,-5]) # 행별 평균

summary(iris)
```

## subset, 원하는 조건의 데이터 추출

`subset(데이터, 조건)`함수는 데이터 속에서 조건에 해당하는 데이터만을 추출한다

```{r}
subset(iris, Species=="setosa") #Species가 "setosa"인 녀석들만 출력
```

### 인덱싱을 통해서 추출하는 방법도 있음

```{r}
iris$Species=="setosa"
iris[iris$Species=="setosa",]
```

### 조건 연산자

`&` : 두 조건을 모두 만족해야됨 (Sepal.Length가 5보다 크면서, Sepal.Width가 4보다 큰 조건)

`|` : 두 조건중 하나만 만족하면됨 (엔터키 위 shift + )

```{r}
subset(iris, Sepal.Length>5.0 & Sepal.Width>4.0)
```

-   인덱싱을 통한 방법

```{r}
iris[iris$Sepal.Length > 5.0 & iris$Sepal.Width > 4.0,]
```

## 행렬의 연산

`a` = 1:20의 4행 5열 행렬

`b` = 21:40의 4행 5열 행렬

```{r}
a <- matrix(1:20,4,5)
a
b <- matrix(21:40,4,5)
b
```

### 사칙연산

-   각 값에서 연산

```{r}
a + 5
a - 3
b * 2
b / 5
```

### 행렬간 연산

**- 두 행렬의 차원(행수, 열수)이 같아야 행렬간 연산 가능**

-   같은 위치의 값끼리 연산

```{r}
a + b
b - a
a * b
b / a
```

### 연산한 행렬을 다시 지정

```{r}
a <- a*3
b <- b-5
```

## 데이터의 구조

`state.x77`은 R 에서 기본제공하는 미국 주별 정보를 담고 있는 행렬 데이터셋이다.

### `class()`

`class()`함수는 데이터의 자료구조를 확인하는 함수이다.

```{r}
class(iris)               # iris 데이터셋의 자료구조 확인  
class(state.x77)          # state.x77 데이터셋의 자료구조 확인 # "matrix"는 내용을 담고있는 행렬, "array"는 열 이름을 담고있음
```

`is.matrix()`,`is.data.frame()`함수는 데이터셋이 행렬(matrix)인지, 데이터프레임인지를 `TRUE`,`FALSE`값으로 출력하는 함수이다.

```{r}
is.matrix(iris)           # 데이터셋이 매트릭스인지를 확인하는 함수
is.data.frame(iris)       # 데이터셋이 데이터프레임인지를 확인하는 함수   
is.matrix(state.x77)
is.data.frame(state.x77)
```

`data.frame()`함수를 통해 행렬을 데이터프레임으로 변환

```{r}
st <- data.frame(state.x77)
head(st)
class(st)
```

`as.matrix()`를 통해 데이터프레임을 행렬로 변환

```{r}
iris.m<- as.matrix(iris[,-5])
head(iris.m)
class(iris.m) # "matrix"는 내용을 담고있는 행렬, "array"는 열 이름을 담고있음
```

`t()`함수는 행렬의 행과 열을 바꾼다. (Transpose)

```{r}
z <- matrix(1:20, nrow=4, ncol=5)
z
t(z)
```
