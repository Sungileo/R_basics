---
title: "PT.2 - 벡터, 리스트, 팩터, 행렬"
description: "2023-2학기 튜터링"
author: "Sungil Park"
date: "2023/10/10"
---
## tip

`tap` 은 자동완성

`F1` 은 함수 설명 문서 보기

## 변수 지우기

`rm` = `remove` 줄임말

`ls()`는 전체 변수 출력

`rm(list = ls())`는 전체변수 삭제

`rm(변수명)`은 `변수명`만 삭제 

```{r}
remove(list = ls())
rm(list = ls())
```

```{r, eval=FALSE}
rm(변수명)
```

## 벡터

`GNP <- c(2090,2450,960)`

 - GNP 라는 변수에 2090, 2450, 960 3개의 숫자 요소를 가진 벡터 생성

`names(GNP) <- c("korea","japan","nepal")`

 - 각 요소에 "korea", "japan", "nepal"의 이름 지정

```{r}
GNP <- c(2090,2450,960)
names(GNP) <- c("korea","japan","nepal")
```


### 요소에 지정된 이름으로 값 출력 (인덱싱)

단일 값 출력
```{r}
GNP["korea"]
```

벡터 사용 여러개의 값 출력
```{r}
GNP[c("korea","nepal")]
```

## 변수에 조건을 지정하기

`d` 라는 변수에 1~9까지의 숫자 벡터 생성

```{r}
d <- c(1,2,3,4,5,6,7,8,9)
d <- c(1:9) 
```


`condi` 라는 변수에 7이하 & 3이상을 만족하는 `d` 지정

 - `TRUE`, `FALSE` 값으로 출력

```{r}
condi <- d <= 7 & d >= 3

condi
```

 - 인덱싱으로 `d`에서의 값 출력하기

```{r}
d[condi]
```

`&` : 두 조건을 모두 만족해야됨, (7보다 작으면서, 3보다 큰 수)

`|` : 두 조건중 하나만 만족하면됨, (7보다 크거나, 3보다 작거나), (엔터키 위 `shift` + `\`)

```{r}
condi_2 <- d <= 3 | d >= 7
d[condi]
```

## 리스트

 - 벡터는 한가지 타입의 요소들만을 담을 수 있음 (숫자면 숫자만, 문자면 문자만)
 
 - 리스트는 여러가지 타입의 요소를 담을 수 있음

```{r}
list_example <- list(1, 2, c(3,4), "munja", TRUE, FALSE)

list_example
```

### 리스트와 생성

```{r}
my.info <- list(name='Tom', 
                age=60, 
                status=TRUE, 
                score=c(90, 85, 70, 84))
```

### 리스트 출력

```{r}
my.info
```

### 리스트의 인덱싱

```{r}
# 첫째 요소
my.info[1]
# 이름이 name인 요소
my.info$name
# 리스트의 2,3번쨰 요소
my.info[c(2,3)]
```

## 팩터

 - 팩터는 범주형 데이터를 지정하는데 사용

 - 예시)
 
     - `bt.vct` 라는 문자형 변수 벡터 지정

     - `bt.fct` 라는 팩터 지정

### 팩터 요소 확인하기
```{r}
bt.vct <- c('A','B','B','O','AB','A')

bt.fct <- factor(bt.vct)
```

`str()`함수는 지정한 변수의 타입을 확인할때 사용

```{r}
str(bt.vct)
str(bt.fct)
```

`levels()`함수는 팩터 변수의 요소값을 확인할때 사용 

```{r}
levels(bt.fct)
```

### 팩터의 인덱싱

```{r}
bt.fct[5]
bt.fct[c(2,5)]
```

팩터,벡터를 숫자형으로 바꾸기
```{r}
as.integer(bt.fct)
as.integer(bt.vct)
```

### 팩터에 값 추가

```{r}
# 기존 6개 값을 가진 팩터에 7번째 값 추가
bt.fct[7] <- 'B'
bt.fct
```

### 요소 외 값 추가

```{r}
# 팩터 요소(A, AB, B, O)에 포함되지 않은 값을 추가하면..
# Warning message = 경고(O), 에러(X)
# NA 값으로 입력됨
bt.fct[8] <- 'C'     
bt.fct
```

### 팩터의 요소 추가

 - `levels()` 함수를 써서 `"C"` 요소 추가

 - 8번째 값에 `"C"` 추가
```{r}
levels(bt.fct) <- c(levels(bt.fct),"C")
bt.fct[8] <- 'C'     
bt.fct
```


## 행렬 (matrix)

### 행렬의 생성

`z` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성 (행 우선)

```{r}
z <- matrix(1:20, nrow=4, ncol=5)
z
```

`z1` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성 (열 우선)

```{r}
z1 <- matrix(1:20, nrow=4, ncol=5, byrow=TRUE)
z1
```

### 행렬 붙히기 (combine)

`x`, `y`라는 변수에 4개의 값을 가진 벡터 생성

`z` 라는 변수에 1~20 의 값, 4행 5열의 행렬 생성

```{r}
x <- 1:4
y <- 5:8
z <- matrix(1:20, nrow=4, ncol=5)
```

`cbind()` 함수는 열 기준으로 값을 붙힌다.(column bind)

`rbind()` 함수는 행 기준으로 값을 붙힌다.(row bind)

```{r}
m1 <- cbind(x,y)
m1
m2 <- rbind(x,y)
m2
```
```{r}
m3 <- rbind(m2,x)
m3
```


```{r}
m4 <- cbind(z,x)
m4
```

### 행렬의 인덱싱

 - python과는 달리 1부터 시작

```{r}
z <- matrix(1:20, nrow=4, ncol=5)
z
```

`matrix[행, 열]`

```{r}
# 2행 3열의 값
z[2,3]
# 2행의 모든 값
z[2,]
# 4열의 모든 값
z[,4]
# 모든 값
z[]
```


```{r}
# 2행 1~3열의 값
z[2, 1:3]
# 1행 1, 2, 4 열의 값
z[1, c(1,2,4)]
# 1~2행의 모든 값
z[1:2, ]
# 1열, 4열의 모든 값
z[, c(1,4)]
```

### 행렬의 행이름, 열이름 넣기

```{r}
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60), nrow=4, ncol=3)
colnames(score) <- c("국어","영어","수학")
rownames(score) <- c("철수","영희","릅신","조던")
score
```
